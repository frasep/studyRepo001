1    /* region: SAS session initialization */
2                                                          The SAS System                            10:41 Friday, February 28, 2025

2    /*----------------------------------------------------------------------
3    /
4    / SASStudio initialization file for SAS
5    /
6    *----------------------------------------------------------------------*/
7    /* Get the Git version */
8    DATA _NULL_;
9      GITVERSION = GIT_VERSION();
10     CALL SYMPUT('_GITVERSION', GITVERSION);
11   RUN;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      10:30   
NOTE: Libgit2 version 1.3.0
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

12   
13   
14   %MACRO resolveHomeDirectory;
15   	%GLOBAL _USERHOME;
16   	%LOCAL _HOMEVAR;
17   
18   	%IF (&SYSSCP=WIN) %THEN
19   		%DO;
20   			%LET _HOMEVAR=USERPROFILE;
21   		%END;
22   	%ELSE
23   		%DO;
24   			%LET _HOMEVAR=HOME;
25   		%END;
26   
27   	%LET _USERHOME= %SYSFUNC(SYSGET(&_HOMEVAR));
28   
29   %MEND;
30   
31   %resolveHomeDirectory;
32   
33   %macro web_open_file(name,type);
34   %global _DATAOUT_NAME;
35   %global _DATAOUT_MIME_TYPE;
36   %let _DATAOUT_NAME=&name;
37   %let _DATAOUT_MIME_TYPE=&type;
38   %mend;
39   
40   %macro web_open_table(table);
41   %global _DATAOUT_TABLE;
42   %if %length(&_dataout_table)=0 %then %let _DATAOUT_TABLE=&table;
43   %else %let _DATAOUT_TABLE=&_DATAOUT_TABLE,&table;
44   %mend;
45   
46   %macro web_open_url(url);
47   %global _DATAOUT_URL;
48   %let _DATAOUT_URL=&url;
49   %mend;
50   
3                                                          The SAS System                            10:41 Friday, February 28, 2025

51   %macro sgdesign();
52   %put ERROR: SGDesigner macro can not be invoked from SAS Studio.;
53   %mend;
54   
55   %macro sgedit();
56   %put ERROR: SGEdit macro can not be invoked from SAS Studio.;
57   %mend;
58   
59   %macro web_list_entries(catalog,type);
60   
61   %let typearg=;
62   %let type=%upcase(&type);
63   %if &type^=_ALL_ and &type^=_all_ %then %let typearg= entrytype=&type;
64   
65   proc catalog catalog=&catalog &typearg;
66   contents;
67   title "Catalog Entries in &catalog";
68   run;
69   quit;
70   
71   %mend;
72   
73   %macro web_list_catalogs(library);
74       %let library=%upcase(&library);
75       proc sql ;
76           create table work.catalogs as select memname as Catalog, memtype as
77               Type, engine as Engine from sashelp.vmember where
78               libname="&library" and memtype="CATALOG";
79           run;
80           quit;
81           title "Catalogs in &library";
82   
83       proc print data=work.catalogs;
84       run;
85   %mend;
86   
87   %macro web_replay_grseg(catalog,entry);
88   proc greplay nofs igout=&catalog;
89   replay &entry;
90   run;
91   %mend;
92   
93   %macro sasstudio_get_zos_ds_info(DSN);
94   
95   OPTIONS FILESYSTEM=MVS;
96   
97   DATA work._sasstudio_dataset_info_;
98   
99     LENGTH XDSN $32000;
100    XDSN=ZDSLIST('CATLG', &DSN, XVOLS, '');
101  
102    LENGTH XNUM 8;
103    XNUM=ZDSNUM(XDSN);
104    LENGTH XIDNM $4096;
105    LENGTH XATTR $4096;
106    LENGTH XATTRC $72;
107    LENGTH XATTRN 8;
108    LENGTH attributeType $10;
4                                                          The SAS System                            10:41 Friday, February 28, 2025

109  
110    DO I=1 to XNUM;
111      XIDNM=ZDSIDNM(XDSN, I);
112      XATTR=ZDSATTR(XIDNM, 'ALL');
113      XATTRN=ZDSXATT(XATTR);
114  
115      do j=1 to xattrn;
116       XATTRC=ZDSYATT(XATTR, j);
117       blank_pos = index(xattrc," ");
118             key = substr(xattrc, blank_pos,99);
119             val= substr(xattrc,1,blank_pos);
120             pos = index(key, 'FILE ATTRIBUTES');
121             if (pos > 0) then do;
122                attributeType = 'FILE';
123             end;
124             else do;
125                 pos = index(key, 'VOLUME ATTRIBUTES');
126                 if (pos > 0) then do;
127                    attributeType = 'VOLUME';
128                 end;
129                 else do;
130                     pos = index(key, 'MIGRATED DATA SET ATTRIBUTES');
131                     if (pos > 0) then do;
132                        attributeType = 'MIGRATED';
133                     end;
134                     else do;
135                        pos = index(key, '*****');
136                     end;
137                 end;
138             end;
139             if (pos = 0) then do;
140                output;
141             end;
142             keep key val attributeType;
143      end;
144    END;
145   RUN;
146  %mend sasstudio_get_zos_ds_info;
147  
148  %macro show_zos_dataset_attributes(dsn);
149     %sasstudio_get_zos_ds_info(&dsn);
150  
151     data work._sasstudio_dataset_info_ds_;
152         set work._sasstudio_dataset_info_;
153  
154         if strip(val)='.' then do;
155             val='***NONE***';
156         end;
157  
158         position = index(attributeType, 'FILE');
159         if position > 0 then do;
160             output;
161         end;
162         drop position attributeType;
163     run;
164  
165     data work._sasstudio_dataset_info_vol_;
166         set work._sasstudio_dataset_info_;
5                                                          The SAS System                            10:41 Friday, February 28, 2025

167  
168         if strip(val)='.' then do;
169             val='***NONE***';
170         end;
171  
172         position = index(attributeType, 'VOLUME');
173         if position > 0 then do;
174             output;
175         end;
176         drop position attributeType;
177     run;
178  
179      proc print data=work._sasstudio_dataset_info_ds_ noobs label;
180      LABEL key='Dataset Attribute'  val='00'x;
181         title1 &dsn;
182      run;
183  
184      proc print data=work._sasstudio_dataset_info_vol_ noobs label;
185          title1;
186          LABEL key='Volume Attribute'  val='00'x;
187      run;
188  
189      proc delete data=work._sasstudio_dataset_info_
190      work._sasstudio_dataset_info_ds_
191      work._sasstudio_dataset_info_vol_;
192  
193  %mend;
194  
195  %macro validCasEnvironment( sessionName=, createSession=, returnCode=RC);
196  
197  /* This section is just to give information about the CAS connection */
198  %let CASHOST = %SYSFUNC(GETOPTION(CASHOST));
199  
200  %if (%LENGTH(&CASHOST)=0) %then %do;
201      %put CASHOST is not set;
202  %end; %else %do;
203      %put CASHOST is &CASHOST;
204  %end;
205  
206  %let CASPORT = %SYSFUNC(GETOPTION(CASPORT));
207  
208  %if (&CASPORT=0) %then %do;
209      %put CASPORT is not set;
210  %end; %else %do;
211      %put CASPORT is &CASPORT;
212  %end;
213  
214  %let CASHOST = %SYSFUNC(GETOPTION(_CASHOST_));
215  %if (%LENGTH(&CASHOST)=0) %then %do;
216      %put _CASHOST_ is not set;
217  %end; %else %do;
218      %put _CASHOST_ is &CASHOST;
219  %end;
220  
221  %let CASPORT = %SYSFUNC(GETOPTION(_CASPORT_));
222  
223  %if (%LENGTH(&CASPORT)=0) %then %do;
224      %put _CASPORT_ is not set;
6                                                          The SAS System                            10:41 Friday, February 28, 2025

225  %end; %else %do;
226      %put _CASPORT_ is &CASPORT;
227  %end;
228  
229  %let CASUSER = %SYSFUNC(GETOPTION(CASUSER));
230  
231  %if (%LENGTH(&CASUSER) = 0) %then %do;
232      %put CASUSER is not set;
233  %end; %else %do;
234      %put CASUSER is &CASUSER;
235  %end;
236  
237  
238  %if &sessionName = %then %do;
239      %let DEFAULTSESS= %SYSFUNC(GETOPTION(SESSREF));
240      %let SESSIONFOUND = %SYSFUNC(SESSFOUND(&DEFAULTSESS));
241      %if (&SESSIONFOUND = 0) %then %do;
242         %put Default session &DEFAULTSESS is not available.;
243         %let &returnCode=0;
244      %end;
245      %else %do;
246         %put Default session &DEFAULTSESS is available.;
247         %let &returnCode=3;
248      %end;
249  %end; %else %do;                                                /* Session name was specified */
250      %if &createSession = %then %do;                             /* createSession not specified */
251         %let SESSIONFOUND = %SYSFUNC(SESSFOUND(&sessionName));   /* Default to false (don't create) */
252         %if (&SESSIONFOUND = 0) %then %do;
253            %put Session &sessionName is not available.;
254            %let &returnCode=0;
255         %end;
256         %else %do;
257            %put Session &sessionName already exists.;
258            %let &returnCode=2;
259         %end;
260      %end;
261      %else %do;
262         %let SESSIONFOUND = %SYSFUNC(SESSFOUND(&sessionName));  /* Does session already exist? */
263         %if (&createSession = false) %then %do;                 /* User does not want to create it. */
264            %put createSession is false;
265            %if (&SESSIONFOUND = 0) %then %do;
266               %put Session &sessionName is not available.;      /* Tell user it does not exist. */
267               %let &returnCode=0;
268            %end;
269            %else %do;
270               %put Session &sessionName exists;
271               %let &returnCode = 2;
272            %end;
273         %end;
274         %else %do;
275           %put createSession is true;
276           %if (&SESSIONFOUND = 0) %then %do;                    /* Session does not exist, so create it */
277               cas &sessionName;
278               %let SESSIONFOUND = %SYSFUNC(SESSFOUND(&sessionName));
279               %if (&SESSIONFOUND = 0) %then %do;               /* Session created successfully */
280                   %let &returnCode=1;
281               %end;
282               %else %do;
7                                                          The SAS System                            10:41 Friday, February 28, 2025

283                   %let &returnCode=4;                          /* Session creation failed. */
284               %end;
285           %end;
286           %else %do;                                           /* Session already exists, so user cannot create it */
287               %put Session &sessionName already exists;
288               %let &returnCode=2;
289           %end;
290         %end;
291      %end;
292  %end;
293  
294  
295  %mend validCasEnvironment;
296  
297  /* This macro is used by code generated for Query nodes in an EG Process flow *
298  /* Conditionally delete set of tables or views, if they exists          */
299  /* If the member does not exist, then no action is performed   */
300  %macro _eg_conditional_dropds /parmbuff;
301  
302      %local num;
303      %local stepneeded;
304      %local stepstarted;
305      %local dsname;
306      %local name;
307  
308      %let num=1;
309      /* flags to determine whether a PROC SQL step is needed */
310      /* or even started yet                                  */
311      %let stepneeded=0;
312      %let stepstarted=0;
313      %let dsname= %qscan(&syspbuff,&num,',()');
314      %do %while(&dsname ne);
315          %let name = %sysfunc(left(&dsname));
316          %if %qsysfunc(exist(&name)) %then %do;
317              %let stepneeded=1;
318              %if (&stepstarted eq 0) %then %do;
319                  proc sql;
320                  %let stepstarted=1;
321  
322              %end;
323                  drop table &name;
324          %end;
325  
326          %if %sysfunc(exist(&name,view)) %then %do;
327              %let stepneeded=1;
328              %if (&stepstarted eq 0) %then %do;
329                  proc sql;
330                  %let stepstarted=1;
331              %end;
332                  drop view &name;
333          %end;
334          %let num=%eval(&num+1);
335          %let dsname=%qscan(&syspbuff,&num,',()');
336      %end;
337      %if &stepstarted %then %do;
338          quit;
339      %end;
340  %mend _eg_conditional_dropds;
8                                                          The SAS System                            10:41 Friday, February 28, 2025

341  
342  /* Given a fileref and a memname and memtype, we attempt to open the
343  member of the directory (catalog or file system directory). We
344  set &member_found to 1 if it can be opened, 0 if not. */
345  %macro _entry_exists(fileref,memname,memtype);
346  %global _macro_found;
347  %let _macro_found = 0;
348  data _null_;
349  *-----open the directory and proceed if it can be opened-----*;
350  handle = dopen("&fileref.");
351  if handle ne 0;
352  *-----open the member and set the macro variable based on result-----*;
353  mem_handle = mopen(handle,"&memname..&memtype.",'i');
354  call symputx('_macro_found',mem_handle ne 0);
355  *-----close the member if it were opened successfully-----*;
356  if mem_handle then rc = fclose(mem_handle);
357  *-----close the directory-----*;
358  rc = dclose(handle);
359  run;
360  %mend _entry_exists;
361  
362  /* Given a macro name, we determine if it has already been
363  compiled. We first look in work.sasmacr, then in the sasmacr
364  referenced by sasmstore (if given) and then in work.sasmacX. */
365  %macro _compiled_macro_exists(macro_name);
366  options nonotes;
367  %global _macro_found;
368  *-----try work.sasmacr first to see if the compiled macro is there-----*;
369  filename maclib catalog "work.sasmacr";
370  %_entry_exists(maclib,&macro_name.,macro);
371  filename maclib clear;
372  %if &_macro_found %then %goto done;
373  *-----try sasmacr referenced by sasmstore if it were specified-----*;
374  %let sasmstore_option = %sysfunc(getoption(sasmstore));
375  %if %sysfunc(getoption(mstored))=MSTORED and %length(&sasmstore_option) > 0 %then %do;
376  filename maclib catalog "&sasmstore_option..sasmacr";
377  %_entry_exists(maclib,&macro_name.,macro);
378  %end;
379  
380  %do i=1 %to 9;
381  %if &_macro_found %then %goto done;
382  filename maclib catalog "work.sasmac&i.";
383  %_entry_exists(maclib,&macro_name.,macro);
384  filename maclib clear;
385  %end;
386  
387  %done: options notes;
388  %mend _compiled_macro_exists;
389  
390  %macro studio_cas_start;
391  
392  %global _macro_found;
393  %global syscasinit;
394  
395  %let syscasinit=0;
396  
397  %_compiled_macro_exists(studio_cas_init);
398  
9                                                          The SAS System                            10:41 Friday, February 28, 2025

399  %if &_macro_found %then %do;
400  
401  %let syscasinit=1;
402  
403  %studio_cas_init;
404  
405  %end;
406  %mend studio_cas_start;
407  
408  %macro studio_hide_wrapper;
409      %global _studionotes;
410      %global _studiosource;
411      %global _studiostimer;
412  
413      %if &_studionotes = %then %do;
414          %let _studionotes=%sysfunc(getoption(notes));
415      %end;
416      options nonotes;
417  
418      %if &_studiosource = %then %do;
419          %let _studiosource=%sysfunc(getoption(source));
420      %end;
421      options nosource;
422  
423      %if &_studiostimer = %then %do;
424          %let _studiostimer=%sysfunc(getoption(stimer));
425      %end;
426      options nostimer;
427  %mend studio_hide_wrapper;
428  
429  %macro studio_show_wrapper;
430      %global _studionotes;
431      %global _studiosource;
432      %global _studiostimer;
433  
434      %if &_studionotes = %then %do;
435          %let _studionotes=%sysfunc(getoption(notes));
436      %end;
437      options notes;
438  
439      %if &_studiosource = %then %do;
440          %let _studiosource=%sysfunc(getoption(source));
441      %end;
442      options source;
443  
444      %if &_studiostimer = %then %do;
445          %let _studiostimer=%sysfunc(getoption(stimer));
446      %end;
447      options stimer;
448  %mend studio_show_wrapper;
449  
450  %macro studio_show_only_notes_wrapper;
451      %global _studionotes;
452      %global _studiosource;
453      %global _studiostimer;
454  
455      %if &_studionotes = %then %do;
456          %let _studionotes=%sysfunc(getoption(notes));
10                                                         The SAS System                            10:41 Friday, February 28, 2025

457      %end;
458      options notes;
459  
460      %if &_studiosource = %then %do;
461          %let _studiosource=%sysfunc(getoption(source));
462      %end;
463      options nosource;
464  
465      %if &_studiostimer = %then %do;
466          %let _studiostimer=%sysfunc(getoption(stimer));
467      %end;
468      options nostimer;
469  %mend studio_show_only_notes_wrapper;
470  
471  
472  %macro studio_restore_wrapper;
473      %global _studionotes;
474      %global _studiosource;
475      %global _studiostimer;
476  
477      options &_studionotes;
478      options &_studiosource;
479      options &_studiostimer;
480  
481      /* Clear out values so we know they have been restored */
482      %let _studionotes=;
483      %let _studiosource=;
484      %let _studiostimer=;
485  %mend studio_restore_wrapper;
486  
487  %macro studio_setup_locale(requestedLocale);
488      %let validlocale=%SYSFUNC(getpxlocale(&requestedlocale));
489      %let validlocale=%trim(&validlocale);
490  
491      %if %length(&validlocale) > 0 %then
492          %do;
493              options locale=&validlocale DFLANG=LOCALE;
494          %end;
495      %else
496          %do;
497              options locale=en_US DFLANG=LOCALE;
498          %end;
499  %mend;
500  
501  /* This macro initializes a base results path for a submission, and sets up a
502     macro variable to access it. */
503  %macro studio_results_directory;
504      %global _results_prefix_;
505      %let _results_prefix_=!COMPUTESERVER_TMP_PATH/results-&SYS_COMPUTE_JOB_ID;
506  %mend;
507  
508  /*
509  This macro initializes the filename and type for any custom output created.
510  */
511  %macro studio_initialize_custom_output;
512      %global _dataout_name _dataout_mime_type;
513      %let _dataout_name=;
514      %let _dataout_mime_type=;
11                                                         The SAS System                            10:41 Friday, February 28, 2025

515  %mend;
516  
517  /*
518  This macro captures the filename and type for any custom output created.
519  */
520  %macro studio_capture_custom_output;
521      %if "&_dataout_name" ne "" and "&_dataout_mime_type" ne "" %then
522          %do;
523              filename _datname "!COMPUTESERVER_TMP_PATH/results-&SYS_COMPUTE_JOB_ID..datname";
524              filename _dattype "!COMPUTESERVER_TMP_PATH/results-&SYS_COMPUTE_JOB_ID..dattype";
525  
526              data _null_;
527                  file _datname;
528                  put "&_dataout_name";
529              run;
530  
531              data _null_;
532                  file _dattype;
533                  put "&_dataout_mime_type";
534              run;
535          %end;
536  %mend;
537  
538  /*
539  This macro captures a log for a background job to the specified destination
540  alongside any HTML results.
541  */
542  %macro studio_capture_background_log;
543  
544      /*
545      Capture original value for syntaxcheck, and set it to nosyntaxcheck so we
546      can capture the log even if there are errors above
547      */
548      %let _studiosyntaxcheck=%sysfunc(getoption(syntaxcheck));
549      options nosyntaxcheck;
550  
551      /*
552      Get base URL for compute, and download the log to the _logout fileref.
553      */
554      %let _url_template=%sysget(SAS_URL_SERVICE_TEMPLATE);
555      %let _url_base=%sysfunc(tranwrd(&_url_template,@k8s.service.name@,sas-compute));
556      proc http
557          url="&_url_base./compute/sessions/&SYS_COMPUTE_SESSION_ID/jobs/&SYS_COMPUTE_JOB_ID/log"
558          oauth_bearer = sas_services
559          method='get'
560          out=_logout;
561      headers 'accept'='text/plain';
562      quit;
563  
564      /*
565      Restore the original value for syntaxcheck.
566      */
567      options &_studiosyntaxcheck;
568  %mend;
569  
570  DATA _NULL_;
571  	ID=SYMGET("SYSUSERID");
572  	CALL SYMPUT("SYSUSERNAME",ID);
12                                                         The SAS System                            10:41 Friday, February 28, 2025

573  	RC=TSLVL('UWUUSERN','N');
574  	_ERROR_=0;
575  	IF (RC^=' ') THEN DO;
576  		call execute("DATA _NULL_;NAME=USERNAME();CALL SYMPUT('SYSUSERNAME',NAME);RUN;");
577  	END;
578  RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: CALL EXECUTE generated line.
1   + DATA _NULL_;NAME=USERNAME();CALL SYMPUT('SYSUSERNAME',NAME);RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

579  
580  OPTIONS TIMEZONE='GMT+01:00';
581  %studio_setup_locale(en-US);
582  OPTIONS VALIDVARNAME=ANY VALIDMEMNAME=EXTEND;
583  /* endregion: SAS session initialization */
584  
585  /* region: SAS Studio autoexec */
586  %macro get_current_gitbranch(cloneDir,studyName);
587  	data _null_;
588  		infile "&cloneDir/&studyName/.git/HEAD" truncover;
589  		input line $100.;
590  
591  		if substr(line, 1, 5)='ref: ' then do;
592  			current_gitbranch=scan(line, 3, '/');
593  			call symputx('current_gitbranch', current_gitbranch, 'G');
594  		end;
595  	run;
596  %mend get_current_gitbranch;
597  
598  %macro createFolderIfNotExist(parentDir, folder);
599      %if %sysfunc(fileexist(&folder)) = 0 %then %do;
600  		data _null_;
601  	    	rc = dcreate("&folder", "&parentDir");
602  	    	if rc = 0 then
603  	        	put 'ERROR: Directory could not be created.';
604  	    	else
605  	        	put 'Directory created successfully.';
606  		run;
607      %end;
608  %mend createFolderIfNotExist;
609  /* endregion: SAS Studio autoexec */
610  
611  /* region: Generated preamble */
612  /* Make sure the current directory is writable */
613  data _null_;
614      length rc 4;
615      %let tworkloc="%sysfunc(getoption(work))";
616      rc=dlgcdir(&tworkloc);
13                                                         The SAS System                      Friday, February 28, 2025 11:41:27 AM

617  run;

NOTE: The current working directory is now 
      "/opt/sas/viya/config/var/tmp/compsrv/default/894b016f-a4e0-406a-9903-21ead3bb7d2f/SAS_work7E40000001AE_studymainprogramsas-d9
      19d628-e941-47b1-b2a9-3ddb2e3e9e20-2406".
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

618  
619  /* Setup options */
620  title;
621  footnote;
622  options validvarname=any;
623  options validmemname=extend;
624  options dtreset date number;
625  options device=png;
626  
627  /* Setup macro variables */
628  %let syscc=0;
629  %let _clientapp = %nrquote(%nrstr(SAS Studio));
630  %let _clientappabbrev = %nrquote(%nrstr(Studio));
631  %let _clientappversion=2025.01;
632  %let _clientversion=;
633  %let _sasservername=&SYSHOSTNAME;
634  %let _sashostname=&SYSHOSTNAME;
635  %let _sasprogramfilehost=&SYSHOSTNAME;
636  %let _clientuserid = %nrquote(%nrstr(viya_admin));
637  %let _clientusername = %nrquote(%nrstr(Viya Administrator));
638  %let clientmachine = %nrquote(%nrstr());
639  %let _clientmachine = %nrquote(%nrstr());
640  %let _clientmode = %nrquote(%nrstr(viya));
641  %let sasworklocation="%sysfunc(getoption(work))/";
642  filename _cwd &sasworklocation;
643  data _null_;
644      call symput('_sasworkingdir',pathname('_cwd'));
645  run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

646  filename _cwd;
NOTE: Fileref _CWD has been deassigned.
647  %let _sasprogramfile = %nrquote(%nrstr(/mnt/viya-share/data/repos/study1/program/studyMainProgram.sas));
648  %let _baseurl = %nrquote(%nrstr(https://viya4.frasep.sas.com/SASStudio/));
649  %let _execenv = %nrquote(%nrstr(SASStudio));
650  %symdel _dataout_mime_type _dataout_name _dataout_url _dataout_table / nowarn;
651  %let _sasws_ = %bquote(%sysfunc(getoption(work)));
652  %let _saswstemp_ = %bquote(%sysfunc(getoption(work)));
653  
654  /* Detect SAS/Graph and setup graph options */
655  data _null_;
656      length rc $255;
657      call symput("graphinit","");
658      call symput("graphterm","");
14                                                         The SAS System                      Friday, February 28, 2025 11:41:27 AM

659      rc=tslvl('sasxgopt','n');
660      _error_=0;
661      if (rc^=' ') then do;
662          call symput("graphinit","goptions reset=all gsfname=_gsfname;");
663          call symput("graphterm","goptions noaccessible;");
664      end;
665  run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

666  data _null_;
667      length rc 4;
668      rc=sysprod("PRODNUM002");
669      if (rc^=1) then do;
670          call symput("graphinit","");
671          call symput("graphterm","");
672      end;
673  run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

674  
675  /* Setup ODS destinations */
676  ods _all_ close;
677  %studio_results_directory;
678  filename _htmlout '/mnt/viya-share/data/repos/study1/program/studyMainProgram.html';
679  filename _gsfname temp;
680  filename _dataout "&_results_prefix_..dat";
681  ods autonavigate off;
682  ods graphics on;
683  ods html5 (id=web) METATEXT='http-equiv="Content-Security-Policy" content="default-src ''none''; style-src ''unsafe-inline'';
683! img-src data: ;"' device=png gpath="&_saswstemp_" path="&_saswstemp_" encoding=utf8 file=_htmlout
683! (title='Results:studyMainProgram.sas') style=Illuminate options(bitmap_mode='inline' outline='on' svg_mode='inline'
683! css_prefix=".ods_&SYS_COMPUTE_JOB_ID" body_id="div_&SYS_COMPUTE_JOB_ID" );
NOTE: Writing HTML5(WEB) Body file: _HTMLOUT
684  &graphinit;
685  filename _logout '/mnt/viya-share/data/repos/study1/program/studyMainProgram.log';
686  %studio_hide_wrapper;
689  /* endregion */
690  
691  /* Final release to commit */
692  
693  /**************************************************************/
694  /* Study dynamic init related to current GIT branch           */
695  /**************************************************************/
696  %let studyName=study1;
697  %let bucketsRootPath = /mnt/viya-share/data/Buckets;
698  %let reposRootPath = /mnt/viya-share/data/repos;
699  %get_current_gitbranch(&reposRootPath, &studyName);

NOTE: The infile "/mnt/viya-share/data/repos/study1/.git/HEAD" is:
      Filename=/mnt/viya-share/data/repos/study1/.git/HEAD,
15                                                         The SAS System                      Friday, February 28, 2025 11:41:27 AM

      Owner Name=UNKNOWN,Group Name=UNKNOWN,
      Access Permission=-rw-r--r--,
      Last Modified=25Feb2025:11:51:55,
      File Size (bytes)=21

NOTE: 1 record was read from the infile "/mnt/viya-share/data/repos/study1/.git/HEAD".
      The minimum record length was 20.
      The maximum record length was 20.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

700  
701  %createFolderIfNotExist(&bucketsRootPath./&studyName., &current_gitbranch.);

NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      701:70   
NOTE: Invalid numeric data, rc='/mnt/viya-share/data/Buckets/study1/main' , at line 701 column 70.
Directory created successfully.
rc=/mnt/viya-share/data/Buckets/study1/main _ERROR_=1 _N_=1
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

702  %createFolderIfNotExist(&bucketsRootPath./&studyName./&current_gitbranch.,data);

NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      702:69   
NOTE: Invalid numeric data, rc='/mnt/viya-share/data/Buckets/study1/main/data' , at line 702 column 69.
Directory created successfully.
rc=/mnt/viya-share/data/Buckets/study1/main/data _ERROR_=1 _N_=1
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

703  %createFolderIfNotExist(&bucketsRootPath./&studyName./&current_gitbranch.,outputs);

NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      703:69   
NOTE: Invalid numeric data, rc='/mnt/viya-share/data/Buckets/study1/main/outputs' , at line 703 column 69.
Directory created successfully.
rc=/mnt/viya-share/data/Buckets/study1/main/outputs _ERROR_=1 _N_=1
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

704  %createFolderIfNotExist(&bucketsRootPath./&studyName./&current_gitbranch.,logs);

NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      704:69   
NOTE: Invalid numeric data, rc='/mnt/viya-share/data/Buckets/study1/main/logs' , at line 704 column 69.
Directory created successfully.
rc=/mnt/viya-share/data/Buckets/study1/main/logs _ERROR_=1 _N_=1
NOTE: DATA statement used (Total process time):
16                                                         The SAS System                      Friday, February 28, 2025 11:41:27 AM

      real time           0.00 seconds
      cpu time            0.00 seconds
      

705  
706  libname stuData "&bucketsRootPath./&studyName./&current_gitbranch./data";
NOTE: Libref STUDATA was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /mnt/viya-share/data/Buckets/study1/main/data
707  
708  /**************************************************************/
709  
710  options nodate pageno=1 linesize=80 pagesize=60 source;
711  proc printto
711! log="&bucketsRootPath./&studyName./&current_gitbranch./logs/sas_log.log";
712     run;

NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

734  
735  /* region: Generated postamble */
736  %studio_hide_wrapper;
/mnt/viya-share/data/repos/study1/program/studyMainProgram.log
/mnt/viya-share/data/repos/study1/program/studyMainProgram.html
764  /* Close ODS destinations */
765  &graphterm; ;*';*";*/;run;quit;
766  quit;run;
767  ods html5 (id=web) close;
768  %if %sysfunc(fileref(_gsfname)) lt 0 %then %do;
769      filename _gsfname clear;
NOTE: Fileref _GSFNAME has been deassigned.
770  %end;
771  %studio_capture_background_log;

